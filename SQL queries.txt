-- 1. Retrieve the total number of orders placed. 

SELECT 
    COUNT(order_id) AS TOTAL_ORDERS
FROM
    pizza_sales_project.orders

-- 2. Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(Q.quantity * P.price), 2) AS TOTAL_REVENUE
FROM
    pizzas P
        JOIN
    orders_detail Q ON P.pizza_id = Q.pizza_id

-- 3. Identify the highest-priced pizza.

SELECT 
    P1.name, P2.price
FROM
    pizza_types P1
        JOIN
    pizzas P2 ON P1.pizza_type_id = P2.pizza_type_id
ORDER BY P2.price DESC
LIMIT 1

-- 4. Identify the most common pizza size ordered.

SELECT 
    P1.size, COUNT(O1.order_detail_id) AS TOTAL_COUNT
FROM
    pizzas P1
        JOIN
    orders_detail O1 ON P1.pizza_id = O1.pizza_id
GROUP BY P1.size
ORDER BY TOTAL_COUNT DESC

-- 5. List the top 5 most ordered pizza types along with their quantities.

SELECT 
    P1.name, SUM(O1.quantity) AS TOTAL_ORDER
FROM
    pizza_types P1
        JOIN
    pizzas P2 ON P1.pizza_type_id = P2.pizza_type_id
        JOIN
    orders_detail O1 ON O1.pizza_id = P2.pizza_id
GROUP BY P1.name
ORDER BY TOTAL_ORDER DESC
LIMIT 5

-- 6. Join the necessary tables to find the total quantity of each pizza category ordered. 

SELECT 
    P2.category, COUNT(P2.category)
FROM
    orders_detail O1
        JOIN
    pizzas P1 ON P1.pizza_id = O1.pizza_id
        JOIN
    pizza_types P2 ON P2.pizza_type_id = P1.pizza_type_id
GROUP BY P2.category

--7. Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time) AS Hours, COUNT(order_id) AS orders
FROM
    orders
GROUP BY HOUR(order_time)
ORDER BY Hours

-- 8. Find the category-wise distribution of pizzas.

SELECT 
    category, COUNT(category) AS count
FROM
    pizza_types
GROUP BY category

-- 9. Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    ROUND(AVG(Total_quantity), 0) AS Days_avg
FROM
    (SELECT 
        O1.order_date, SUM(O2.quantity) AS Total_quantity
    FROM
        orders O1
    JOIN orders_detail O2 ON O2.order_id = O1.order_id
    GROUP BY O1.order_date) AS temp

-- 10. Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    P2.name, SUM(O1.quantity * P1.price) AS REVENUE
FROM
    orders_detail O1
        JOIN
    pizzas P1 ON O1.pizza_id = P1.pizza_id
        JOIN
    pizza_types P2 ON P2.pizza_type_id = P1.pizza_type_id
GROUP BY P2.name
ORDER BY REVENUE DESC
LIMIT 3

-- 11. Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
    P2.category, ROUND((SUM(O1.quantity * P1.price)/(SELECT 
    ROUND(SUM(Q.quantity * P.price), 2) AS TOTAL_REVENUE
FROM
    pizzas P
        JOIN
    orders_detail Q ON P.pizza_id = Q.pizza_id )*100),2) AS REVENUE_PERCENTS
FROM 
    orders_detail O1
        JOIN
    pizzas P1 ON O1.pizza_id = P1.pizza_id
        JOIN
    pizza_types P2 ON P2.pizza_type_id = P1.pizza_type_id
GROUP BY P2.category

-- 12. Analyze the cumulative revenue generated over time.

SELECT order_date,
round(sum(revenue) over(order by order_date),2) as cumulative_sum
from
(SELECT O1.order_date , SUM(P1.price*O2.quantity) as revenue
from orders O1
join orders_detail O2
on O1.order_id = O2.order_id
join pizzas P1
on P1.pizza_id = O2.pizza_id
group by O1.order_date) as date_wise_sales

-- 13. Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT category, name , REVENUE , ranks
from
(SELECT category, name , REVENUE ,
dense_rank() over( partition by category order by REVENUE desc) as ranks
from
(SELECT P1.category , P1.name , round(SUM(O1.quantity*P2.price),2) as REVENUE 
from pizza_types P1
join pizzas P2
on P1.pizza_type_id = P2.pizza_type_id
join orders_detail O1
on O1.pizza_id = P2.pizza_id
group by P1.category , P1.name) as a) as b 
where ranks <= '3'